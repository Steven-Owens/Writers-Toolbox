/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.civprod.writerstoolbox;

import static com.civprod.writerstoolbox.TagStrippingForm.UTF_8;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.JFileChooser;

/**
 *
 * @author Steven Owens
 */
public class ConvertToUTF8 extends javax.swing.JFrame {
    
    public static final Charset UTF_8 = StandardCharsets.UTF_8;

    /**
     * Creates new form ConvertToUTF8
     */
    public ConvertToUTF8() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        myFileChooser = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        txtCurrentEncoding = new javax.swing.JTextField();
        cmdProcessFile = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("current encoding");

        txtCurrentEncoding.setText("jTextField1");

        cmdProcessFile.setText("load and process File");
        cmdProcessFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdProcessFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCurrentEncoding, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmdProcessFile)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCurrentEncoding, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdProcessFile)
                .addContainerGap(233, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdProcessFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdProcessFileActionPerformed
        final String encodingName = txtCurrentEncoding.getText();
        final ConvertToUTF8 tempThis = this;
        new Thread(() -> {
            Charset fileCharset = Charset.forName(encodingName.trim());
            int returnval = myFileChooser.showOpenDialog(tempThis);
            if (returnval == JFileChooser.APPROVE_OPTION) {
                final File selectedFile = myFileChooser.getSelectedFile();
                final File selectedFileOutput = selectedFile;
                java.io.BufferedReader fin = null;
                String FileData = "";
                try {
                    fin = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(selectedFile),fileCharset));
                    FileData = fin.lines().collect(Collectors.joining("\n"));
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(ConvertToUTF8.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    if (fin != null){
                        try {
                            fin.close();
                        } catch (IOException ex) {
                            Logger.getLogger(TagStrippingForm.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
                java.io.BufferedWriter fout = null;
                try {
                    fout = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(selectedFileOutput),UTF_8));
                    fout.append(FileData);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(TagStrippingForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(TagStrippingForm.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    if (fout != null){
                        try {
                            fout.close();
                        } catch (IOException ex) {
                            Logger.getLogger(TagStrippingForm.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
        }).start();
    }//GEN-LAST:event_cmdProcessFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConvertToUTF8.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConvertToUTF8.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConvertToUTF8.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConvertToUTF8.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConvertToUTF8().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdProcessFile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JFileChooser myFileChooser;
    private javax.swing.JTextField txtCurrentEncoding;
    // End of variables declaration//GEN-END:variables
}
