/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.civprod.writerstoolbox.OpenNLP.training;

import com.civprod.writerstoolbox.NaturalLanguage.util.TextAndTokenHandling.RegexTokenStripper;
import com.civprod.writerstoolbox.TagStrippingForm;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import opennlp.tools.dictionary.Dictionary;
import opennlp.tools.util.StringList;

/**
 *
 * @author Steven Owens
 */
public class DictionaryEditor extends EditorWindow<Dictionary> {

    /**
     * Creates new form DictionaryEditor
     */
    public DictionaryEditor() {
        initComponents();
        createdObject = new Dictionary(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        myFileChooser = new javax.swing.JFileChooser();
        cmdLoadTextFile = new javax.swing.JButton();
        cmdLoadDictionaryFile = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtEditorArea = new javax.swing.JTextArea();
        cmdCreateAndClose = new javax.swing.JButton();

        cmdLoadTextFile.setText("Load text File");
        cmdLoadTextFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLoadTextFileActionPerformed(evt);
            }
        });

        cmdLoadDictionaryFile.setText("load Dictionary file");
        cmdLoadDictionaryFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLoadDictionaryFileActionPerformed(evt);
            }
        });

        txtEditorArea.setColumns(20);
        txtEditorArea.setRows(5);
        jScrollPane1.setViewportView(txtEditorArea);

        cmdCreateAndClose.setText("create and close");
        cmdCreateAndClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCreateAndCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cmdLoadTextFile)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmdLoadDictionaryFile))
                            .addComponent(cmdCreateAndClose))
                        .addGap(0, 123, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdLoadTextFile)
                    .addComponent(cmdLoadDictionaryFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdCreateAndClose)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void writeDictionaryFile() {
        OutputStream serializeOutputStream = null;
        try {
            serializeOutputStream = new java.io.BufferedOutputStream(new java.io.FileOutputStream("abb.dict"));
            createdObject.serialize(serializeOutputStream);
        } catch (IOException ex) {
            Logger.getLogger(DictionaryEditor.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (serializeOutputStream != null) {
                try {
                    serializeOutputStream.close();
                } catch (IOException ex) {
                    Logger.getLogger(DictionaryEditor.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
    private void cmdLoadTextFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLoadTextFileActionPerformed
        final DictionaryEditor tempthis = this;
        new Thread(() -> {
            int returnval = myFileChooser.showOpenDialog(tempthis);
            if (returnval == JFileChooser.APPROVE_OPTION) {
                final File selectedFile = myFileChooser.getSelectedFile();
                java.io.BufferedReader fin = null;
                String FileData = "";
                try {
                    fin = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.BufferedInputStream(new java.io.FileInputStream(selectedFile))));
                    FileData = fin.lines().collect(StringBuffer::new,
                            (StringBuffer coll, String newData) -> {
                                if (coll.length() > 0) {
                                    coll.append('\n');
                                }
                                coll.append(newData);
                            }, (StringBuffer coll, StringBuffer other) -> {
                                if (coll.length() > 0) {
                                    coll.append('\n');
                                }
                                coll.append(other);
                            }
                    ).toString();
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(TagStrippingForm.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    if (fin != null) {
                        try {
                            fin.close();
                        } catch (IOException ex) {
                            Logger.getLogger(TagStrippingForm.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
                txtEditorArea.setText(FileData);
                createDictionary();
                writeDictionaryFile();
            }
        }).start();
    }//GEN-LAST:event_cmdLoadTextFileActionPerformed

    private void createDictionary() {
        String[] lines = txtEditorArea.getText().split("\n");
        this.createdObject = new Dictionary(false);
        for (String curLine : lines) {
            createdObject.put(new StringList(curLine));
        }
    }

    private void cmdCreateAndCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCreateAndCloseActionPerformed
        final DictionaryEditor tempthis = this;
        new Thread(() -> {
            createDictionary();
            writeDictionaryFile();
            this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
        }).start();
    }//GEN-LAST:event_cmdCreateAndCloseActionPerformed

    private void cmdLoadDictionaryFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLoadDictionaryFileActionPerformed
        final DictionaryEditor tempthis = this;
        new Thread(() -> {
            int returnval = myFileChooser.showOpenDialog(tempthis);
            if (returnval == JFileChooser.APPROVE_OPTION) {
                final File selectedFile = myFileChooser.getSelectedFile();
                InputStream DictionaryInputStream = null;
                try {
                    DictionaryInputStream = new java.io.BufferedInputStream(new FileInputStream(selectedFile));
                    this.createdObject = new Dictionary(DictionaryInputStream);
                    StringBuffer newContent = new StringBuffer(0);
                    for (StringList curEntry : createdObject) {
                        if (newContent.length() > 0) {
                            newContent.append('\n');
                        }
                        boolean firstOnLine = true;
                        for (String curToken : curEntry) {
                            if (!firstOnLine) {
                                newContent.append(' ');
                            }
                            newContent.append(curToken);
                            firstOnLine = false;
                        }
                    }
                    txtEditorArea.setText(newContent.toString());
                } catch (IOException ex) {
                    Logger.getLogger(DictionaryEditor.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    if (DictionaryInputStream != null) {
                        try {
                            DictionaryInputStream.close();
                        } catch (IOException ex) {
                            Logger.getLogger(DictionaryEditor.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
        }).start();
    }//GEN-LAST:event_cmdLoadDictionaryFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DictionaryEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DictionaryEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DictionaryEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DictionaryEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DictionaryEditor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdCreateAndClose;
    private javax.swing.JButton cmdLoadDictionaryFile;
    private javax.swing.JButton cmdLoadTextFile;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JFileChooser myFileChooser;
    private javax.swing.JTextArea txtEditorArea;
    // End of variables declaration//GEN-END:variables
}
